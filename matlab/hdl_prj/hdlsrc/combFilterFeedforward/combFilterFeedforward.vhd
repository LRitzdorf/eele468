-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/combFilterFeedforward/combFilterFeedforward.vhd
-- Created: 2024-03-20 10:34:09
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: combFilterFeedforward
-- Source Path: combFilterFeedforward/combFilterSystem/combFilterFeedforward
-- Hierarchy Level: 1
-- Model version: 6.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY combFilterFeedforward IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        audioIn                           :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
        delayM                            :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        b0                                :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En16
        bM                                :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En16
        audioOut                          :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En23
        );
END combFilterFeedforward;


ARCHITECTURE rtl OF combFilterFeedforward IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT Delay
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          audioIn                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          delayM                          :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          delayedAudioOut                 :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En23
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Delay
    USE ENTITY work.Delay(rtl);

  -- Signals
  SIGNAL audioIn_1                        : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL audioIn_2                        : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL b0_1                             : signed(15 DOWNTO 0);  -- sfix16_En16
  SIGNAL b0_2                             : signed(15 DOWNTO 0);  -- sfix16_En16
  SIGNAL Product1_mul_temp                : signed(39 DOWNTO 0);  -- sfix40_En39
  SIGNAL Product1_out1                    : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Product1_out1_1                  : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Delay_out1                       : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL Delay_out1_1                     : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Delay_out1_2                     : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL bM_1                             : signed(15 DOWNTO 0);  -- sfix16_En16
  SIGNAL bM_2                             : signed(15 DOWNTO 0);  -- sfix16_En16
  SIGNAL Product_mul_temp                 : signed(39 DOWNTO 0);  -- sfix40_En39
  SIGNAL Product_out1                     : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Product_out1_1                   : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Add_add_cast                     : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL Add_add_cast_1                   : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL Add_out1                         : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL Add_out1_1                       : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL Add_out1_2                       : signed(23 DOWNTO 0);  -- sfix24_En23

BEGIN
  -- Feedforward Comb Filter
  -- 
  -- 
  -- https://www.dsprelated.com/freebooks/pasp/Comb_Filters.htm
  -- 
  -- Since we are targeting the FPGA fabric, the z^-M delay is implemented with a circular buffer that uses a
  -- dual port memory.  The circularBufferDPRAM is a
  -- referenced subsystem in Simulink

  u_Delay : Delay
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_1 => enb_1_2048_1,
              enb => enb,
              enb_1_2048_0 => enb_1_2048_0,
              audioIn => audioIn,  -- sfix24_En23
              delayM => delayM,  -- uint16
              delayedAudioOut => Delay_out1  -- sfix24_En23
              );

  audioIn_1 <= signed(audioIn);

  HwModeRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      audioIn_2 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        audioIn_2 <= audioIn_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  b0_1 <= signed(b0);

  HwModeRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      b0_2 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        b0_2 <= b0_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  Product1_mul_temp <= audioIn_2 * b0_2;
  Product1_out1 <= Product1_mul_temp(39 DOWNTO 16);

  PipelineRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product1_out1_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product1_out1_1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Delay_out1_1 <= signed(Delay_out1);

  HwModeRegister2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1_2 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1_2 <= Delay_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister2_process;


  bM_1 <= signed(bM);

  HwModeRegister3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      bM_2 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        bM_2 <= bM_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister3_process;


  Product_mul_temp <= Delay_out1_2 * bM_2;
  Product_out1 <= Product_mul_temp(39 DOWNTO 16);

  PipelineRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_out1_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product_out1_1 <= Product_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  Add_add_cast <= resize(Product1_out1_1, 25);
  Add_add_cast_1 <= resize(Product_out1_1, 25);
  Add_out1 <= Add_add_cast + Add_add_cast_1;

  rd_0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Add_out1_1 <= to_signed(16#0000000#, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Add_out1_1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  
  Add_out1_2 <= X"7FFFFF" WHEN (Add_out1_1(24) = '0') AND (Add_out1_1(23) /= '0') ELSE
      X"800000" WHEN (Add_out1_1(24) = '1') AND (Add_out1_1(23) /= '1') ELSE
      Add_out1_1(23 DOWNTO 0);

  audioOut <= std_logic_vector(Add_out1_2);

END rtl;

