-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/combFilterFeedforward/wetDryMixer.vhd
-- Created: 2024-03-20 10:34:09
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: wetDryMixer
-- Source Path: combFilterFeedforward/combFilterSystem/wetDryMixer
-- Hierarchy Level: 1
-- Model version: 6.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.combFilterSystem_pkg.ALL;

ENTITY wetDryMixer IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dryAudio                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
        wetAudio                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
        wetDryMix                         :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En16
        audioOut                          :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En23
        );
END wetDryMixer;


ARCHITECTURE rtl OF wetDryMixer IS

  -- Signals
  SIGNAL dryAudio_signed                  : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL HwModeRegister_reg               : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL dryAudio_1                       : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Constant_out1                    : std_logic;  -- ufix1
  SIGNAL Constant_out1_1                  : std_logic;  -- ufix1
  SIGNAL wetDryMix_unsigned               : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL wetDryMix_1                      : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL Subtract_sub_cast                : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Subtract_sub_cast_1              : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Subtract_sub_temp                : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Subtract_out1                    : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Subtract_out1_1                  : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Product1_mul_temp                : signed(47 DOWNTO 0);  -- sfix48_En46
  SIGNAL Product1_out1                    : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL rd_3_reg                         : vector_of_signed24(0 TO 2);  -- sfix24 [3]
  SIGNAL Product1_out1_1                  : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL HwModeRegister2_reg              : vector_of_unsigned16(0 TO 2);  -- ufix16 [3]
  SIGNAL wetDryMix_2                      : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL wetAudio_signed                  : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL wetAudio_1                       : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Product2_cast                    : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Product2_mul_temp                : signed(40 DOWNTO 0);  -- sfix41_En39
  SIGNAL Product2_cast_1                  : signed(39 DOWNTO 0);  -- sfix40_En39
  SIGNAL Product2_out1                    : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Product2_out1_1                  : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Add1_add_cast                    : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL Add1_add_cast_1                  : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL Add1_out1                        : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL Add1_out1_1                      : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL Add1_out1_2                      : signed(23 DOWNTO 0);  -- sfix24_En23

  ATTRIBUTE multstyle : string;

BEGIN
  -- wet signal mix
  -- dry signal mix

  dryAudio_signed <= signed(dryAudio);

  HwModeRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister_reg <= (OTHERS => to_signed(16#000000#, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister_reg(0) <= dryAudio_signed;
        HwModeRegister_reg(1) <= HwModeRegister_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;

  dryAudio_1 <= HwModeRegister_reg(1);

  Constant_out1 <= '1';

  rd_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Constant_out1_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Constant_out1_1 <= Constant_out1;
      END IF;
    END IF;
  END PROCESS rd_1_process;


  wetDryMix_unsigned <= unsigned(wetDryMix);

  rd_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      wetDryMix_1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        wetDryMix_1 <= wetDryMix_unsigned;
      END IF;
    END IF;
  END PROCESS rd_2_process;


  Subtract_sub_cast <= signed(resize(unsigned'(Constant_out1_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0'), 18));
  Subtract_sub_cast_1 <= signed(resize(wetDryMix_1, 18));
  Subtract_sub_temp <= Subtract_sub_cast - Subtract_sub_cast_1;
  Subtract_out1 <= Subtract_sub_temp(16 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0';

  HwModeRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract_out1_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subtract_out1_1 <= Subtract_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  Product1_mul_temp <= dryAudio_1 * Subtract_out1_1;
  Product1_out1 <= Product1_mul_temp(46 DOWNTO 23);

  rd_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_3_reg <= (OTHERS => to_signed(16#000000#, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_3_reg(0) <= Product1_out1;
        rd_3_reg(1 TO 2) <= rd_3_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_3_process;

  Product1_out1_1 <= rd_3_reg(2);

  HwModeRegister2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister2_reg <= (OTHERS => to_unsigned(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister2_reg(0) <= wetDryMix_1;
        HwModeRegister2_reg(1 TO 2) <= HwModeRegister2_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS HwModeRegister2_process;

  wetDryMix_2 <= HwModeRegister2_reg(2);

  wetAudio_signed <= signed(wetAudio);

  HwModeRegister3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      wetAudio_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        wetAudio_1 <= wetAudio_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister3_process;


  Product2_cast <= signed(resize(wetDryMix_2, 17));
  Product2_mul_temp <= Product2_cast * wetAudio_1;
  Product2_cast_1 <= Product2_mul_temp(39 DOWNTO 0);
  Product2_out1 <= Product2_cast_1(39 DOWNTO 16);

  PipelineRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product2_out1_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product2_out1_1 <= Product2_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  Add1_add_cast <= resize(Product1_out1_1, 25);
  Add1_add_cast_1 <= resize(Product2_out1_1, 25);
  Add1_out1 <= Add1_add_cast + Add1_add_cast_1;

  rd_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Add1_out1_1 <= to_signed(16#0000000#, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Add1_out1_1 <= Add1_out1;
      END IF;
    END IF;
  END PROCESS rd_5_process;


  
  Add1_out1_2 <= X"7FFFFF" WHEN (Add1_out1_1(24) = '0') AND (Add1_out1_1(23) /= '0') ELSE
      X"800000" WHEN (Add1_out1_1(24) = '1') AND (Add1_out1_1(23) /= '1') ELSE
      Add1_out1_1(23 DOWNTO 0);

  audioOut <= std_logic_vector(Add1_out1_2);

END rtl;

