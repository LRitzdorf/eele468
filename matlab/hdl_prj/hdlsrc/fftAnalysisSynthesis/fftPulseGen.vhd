-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/fftAnalysisSynthesis/fftPulseGen.vhd
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: fftPulseGen
-- Source Path: fftAnalysisSynthesis/fftAnalysisSynthesis/analysis/fftFrameBuffering/fftPulseGen
-- Hierarchy Level: 3
-- Model version: 8.2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY fftPulseGen IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_4194304_1                   :   IN    std_logic;
        counter                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        fftStartPulse                     :   OUT   std_logic
        );
END fftPulseGen;


ARCHITECTURE rtl OF fftPulseGen IS

  -- Component Declarations
  COMPONENT fftFramePulseGen
    PORT( counterValue                    :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          framePulse                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT waitForData
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_4194304_1                 :   IN    std_logic;
          framePulse                      :   IN    std_logic;
          fftFramePulse                   :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : fftFramePulseGen
    USE ENTITY work.fftFramePulseGen(rtl);

  FOR ALL : waitForData
    USE ENTITY work.waitForData(rtl);

  -- Signals
  SIGNAL fftFramePulseGen_out1            : std_logic;
  SIGNAL waitForData_out1                 : std_logic;

BEGIN
  -- Don't send out FFT frame start pulses 
  -- until circular buffer has filled.

  u_fftFramePulseGen : fftFramePulseGen
    PORT MAP( counterValue => counter,  -- uint8
              framePulse => fftFramePulseGen_out1
              );

  u_waitForData : waitForData
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_4194304_1 => enb_1_4194304_1,
              framePulse => fftFramePulseGen_out1,
              fftFramePulse => waitForData_out1
              );

  fftStartPulse <= waitForData_out1;

END rtl;

