-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/fftAnalysisSynthesis/synthesis.vhd
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: synthesis
-- Source Path: fftAnalysisSynthesis/fftAnalysisSynthesis/synthesis
-- Hierarchy Level: 1
-- Model version: 8.2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY synthesis IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_4194304_1                   :   IN    std_logic;
        enb_1_4194304_0                   :   IN    std_logic;
        enb_1_4194304_4097                :   IN    std_logic;
        fftModifiedData_re                :   IN    std_logic_vector(30 DOWNTO 0);  -- sfix31_En23
        fftModifiedData_im                :   IN    std_logic_vector(30 DOWNTO 0);  -- sfix31_En23
        fftValid                          :   IN    std_logic;
        fftFramePulse                     :   IN    std_logic;
        audioOut                          :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En23
        );
END synthesis;


ARCHITECTURE rtl OF synthesis IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT iFFT
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(30 DOWNTO 0);  -- sfix31_En23
          dataIn_im                       :   IN    std_logic_vector(30 DOWNTO 0);  -- sfix31_En23
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(30 DOWNTO 0);  -- sfix31_En23
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT overlapAdd
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_4194304_1                 :   IN    std_logic;
          enb_1_4194304_0                 :   IN    std_logic;
          enb_1_4194304_4097              :   IN    std_logic;
          iFFTData                        :   IN    std_logic_vector(30 DOWNTO 0);  -- sfix31_En23
          iFFTValid                       :   IN    std_logic;
          fftFramePulse                   :   IN    std_logic;
          audioOut                        :   OUT   std_logic_vector(32 DOWNTO 0)  -- sfix33_En23
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : iFFT
    USE ENTITY work.iFFT(rtl);

  FOR ALL : overlapAdd
    USE ENTITY work.overlapAdd(rtl);

  -- Signals
  SIGNAL kconst                           : signed(32 DOWNTO 0);  -- sfix33_En32
  SIGNAL kconst_1                         : signed(32 DOWNTO 0);  -- sfix33_En32
  SIGNAL fftValid_1                       : std_logic;
  SIGNAL iFFT_out1_re                     : std_logic_vector(30 DOWNTO 0);  -- ufix31
  SIGNAL iFFT_out2                        : std_logic;
  SIGNAL overlapAdd_out1                  : std_logic_vector(32 DOWNTO 0);  -- ufix33
  SIGNAL overlapAdd_out1_1                : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL overlapAdd_out1_2                : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Gain_out1                        : signed(65 DOWNTO 0);  -- sfix66_En55
  SIGNAL Gain_out1_1                      : signed(65 DOWNTO 0);  -- sfix66_En55
  SIGNAL Gain_out1_2                      : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL t_bypass_reg                     : signed(23 DOWNTO 0);  -- sfix24
  SIGNAL Gain_out1_3                      : signed(23 DOWNTO 0);  -- sfix24_En23

BEGIN
  -- Making the assumption that the frequency domain processing preserved the complex conjugate pairs so that the output 
  -- is real and we can discard the zero imaginary term

  u_iFFT : iFFT
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_0 => enb_1_2048_0,
              dataIn_re => fftModifiedData_re,  -- sfix31_En23
              dataIn_im => fftModifiedData_im,  -- sfix31_En23
              validIn => fftValid_1,
              dataOut_re => iFFT_out1_re,  -- sfix31_En23
              validOut => iFFT_out2
              );

  u_overlapAdd : overlapAdd
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_0 => enb_1_2048_0,
              enb_1_2048_1 => enb_1_2048_1,
              enb => enb,
              enb_1_4194304_1 => enb_1_4194304_1,
              enb_1_4194304_0 => enb_1_4194304_0,
              enb_1_4194304_4097 => enb_1_4194304_4097,
              iFFTData => iFFT_out1_re,  -- sfix31_En23
              iFFTValid => iFFT_out2,
              fftFramePulse => fftFramePulse,
              audioOut => overlapAdd_out1  -- sfix33_En23
              );

  kconst <= signed'("010100110011001100110011001100110");

  HwModeRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_1 <= to_signed(0, 33);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        kconst_1 <= kconst;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      fftValid_1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        fftValid_1 <= fftValid;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  overlapAdd_out1_1 <= signed(overlapAdd_out1);

  HwModeRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      overlapAdd_out1_2 <= to_signed(0, 33);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        overlapAdd_out1_2 <= overlapAdd_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  Gain_out1 <= kconst_1 * overlapAdd_out1_2;

  PipelineRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain_out1_1 <= to_signed(0, 66);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Gain_out1_1 <= Gain_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Gain_out1_2 <= Gain_out1_1(55 DOWNTO 32);

  t_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      t_bypass_reg <= to_signed(16#000000#, 24);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4194304_1 = '1' THEN
        t_bypass_reg <= Gain_out1_2;
      END IF;
    END IF;
  END PROCESS t_bypass_process;

  
  Gain_out1_3 <= Gain_out1_2 WHEN enb_1_4194304_1 = '1' ELSE
      t_bypass_reg;

  audioOut <= std_logic_vector(Gain_out1_3);

END rtl;

