-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/fftAnalysisSynthesis/fftFramePulseGen.vhd
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: fftFramePulseGen
-- Source Path: fftAnalysisSynthesis/fftAnalysisSynthesis/analysis/fftFrameBuffering/fftPulseGen/fftFramePulseGen
-- Hierarchy Level: 4
-- Model version: 8.3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY fftFramePulseGen IS
  PORT( counterValue                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        framePulse                        :   OUT   std_logic
        );
END fftFramePulseGen;


ARCHITECTURE rtl OF fftFramePulseGen IS

  -- Signals
  SIGNAL counterValue_unsigned            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice_out1                   : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Compare_To_Zero_out1             : std_logic;

BEGIN
  -- Create a FFT frame pulse that happens every FFT_size/4 samples.
  -- We do this by watching when an appropriate subset of the counter bits 
  -- become zero.

  counterValue_unsigned <= unsigned(counterValue);

  Bit_Slice_out1 <= counterValue_unsigned(4 DOWNTO 0);

  
  Compare_To_Zero_out1 <= '1' WHEN Bit_Slice_out1 = to_unsigned(16#00#, 5) ELSE
      '0';

  framePulse <= Compare_To_Zero_out1;

END rtl;

