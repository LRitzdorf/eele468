-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/fftAnalysisSynthesis/filter3Coefficients.vhd
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: filter3Coefficients
-- Source Path: fftAnalysisSynthesis/fftAnalysisSynthesis/frequencyDomainProcessing/applyComplexGains/fftFilterCoefficients/filterChoice/filter3Coefficients
-- Hierarchy Level: 5
-- Model version: 8.2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.fftAnalysisSynthesis_pkg.ALL;

ENTITY filter3Coefficients IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        ROMindex                          :   IN    std_logic_vector(8 DOWNTO 0);  -- sfix9
        conjugate                         :   IN    std_logic;
        complexCoefficients_re            :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En8
        complexCoefficients_im            :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En8
        );
END filter3Coefficients;


ARCHITECTURE rtl OF filter3Coefficients IS

  -- Constants
  CONSTANT filter3RealCoefficients_table_data : vector_of_signed16(0 TO 63) := 
    (to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16),
     to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16),
     to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16),
     to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16),
     to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16),
     to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16),
     to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16),
     to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0100#, 16), to_signed(16#0100#, 16),
     to_signed(16#0100#, 16), to_signed(16#0100#, 16), to_signed(16#0100#, 16), to_signed(16#0100#, 16),
     to_signed(16#0100#, 16), to_signed(16#0100#, 16), to_signed(16#0100#, 16), to_signed(16#0100#, 16),
     to_signed(16#0100#, 16), to_signed(16#0100#, 16), to_signed(16#0100#, 16), to_signed(16#0100#, 16),
     to_signed(16#0100#, 16), to_signed(16#0100#, 16), to_signed(16#0100#, 16), to_signed(16#0100#, 16),
     to_signed(16#0100#, 16), to_signed(16#0100#, 16), to_signed(16#0100#, 16), to_signed(16#0100#, 16),
     to_signed(16#0100#, 16), to_signed(16#0100#, 16), to_signed(16#0100#, 16), to_signed(16#0100#, 16),
     to_signed(16#0100#, 16), to_signed(16#0100#, 16), to_signed(16#0100#, 16), to_signed(16#0100#, 16),
     to_signed(16#0100#, 16), to_signed(16#0100#, 16), to_signed(16#0100#, 16), to_signed(16#0100#, 16));  -- sfix16 [64]

  -- Signals
  SIGNAL ROMindex_signed                  : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL filter3RealCoefficients_index    : signed(31 DOWNTO 0);  -- int32
  SIGNAL filter3RealCoefficients_out1     : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL filter3RealCoefficients_out1_1   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En8
  SIGNAL conjugate_1                      : std_logic;
  SIGNAL filter3ImagCoefficients_out1     : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL filter3ImagCoefficients_out1_1   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En8
  SIGNAL Unary_Minus_cast                 : signed(16 DOWNTO 0);  -- sfix17_En8
  SIGNAL Unary_Minus_cast_1               : signed(16 DOWNTO 0);  -- sfix17_En8
  SIGNAL Unary_Minus_out1                 : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL Switch1_out1                     : signed(15 DOWNTO 0);  -- sfix16_En8

BEGIN
  -- Perform conjuation of the imaginary term
  -- for the negative frequencies
  -- When conjugate is asserted
  -- change the sign of the complex term.
  -- The coefficients are only stored for the positive frequencies
  -- The same coefficients are used for the negative frequencies but with a sign change.

  ROMindex_signed <= signed(ROMindex);

  
  filter3RealCoefficients_index <= to_signed(16#0000003F#, 32) WHEN ROMindex_signed > to_signed(16#0000003F#, 9) ELSE
      resize(ROMindex_signed, 32);
  filter3RealCoefficients_out1 <= filter3RealCoefficients_table_data(to_integer(filter3RealCoefficients_index));

  PipelineRegister1_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF enb = '1' THEN
        filter3RealCoefficients_out1_1 <= filter3RealCoefficients_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  complexCoefficients_re <= std_logic_vector(filter3RealCoefficients_out1_1);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      conjugate_1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        conjugate_1 <= conjugate;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  filter3ImagCoefficients_out1 <= to_signed(16#0000#, 16);

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF enb = '1' THEN
        filter3ImagCoefficients_out1_1 <= filter3ImagCoefficients_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Unary_Minus_cast <= resize(filter3ImagCoefficients_out1_1, 17);
  Unary_Minus_cast_1 <=  - (Unary_Minus_cast);
  Unary_Minus_out1 <= Unary_Minus_cast_1(15 DOWNTO 0);

  
  Switch1_out1 <= filter3ImagCoefficients_out1_1 WHEN conjugate_1 = '0' ELSE
      Unary_Minus_out1;

  complexCoefficients_im <= std_logic_vector(Switch1_out1);

END rtl;

