-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/fftAnalysisSynthesis/overlapAdd.vhd
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: overlapAdd
-- Source Path: fftAnalysisSynthesis/fftAnalysisSynthesis/synthesis/overlapAdd
-- Hierarchy Level: 2
-- Model version: 8.3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.fftAnalysisSynthesis_pkg.ALL;

ENTITY overlapAdd IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        enb_1_2048_7                      :   IN    std_logic;
        iFFTData                          :   IN    std_logic_vector(30 DOWNTO 0);  -- sfix31_En23
        iFFTValid                         :   IN    std_logic;
        fftFramePulse                     :   IN    std_logic;
        audioOut                          :   OUT   std_logic_vector(32 DOWNTO 0)  -- sfix33_En23
        );
END overlapAdd;


ARCHITECTURE rtl OF overlapAdd IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT fifoWriteSelect
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          fifoCounter                     :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          validSignal                     :   IN    std_logic;
          valid1                          :   OUT   std_logic;
          valid2                          :   OUT   std_logic;
          valid3                          :   OUT   std_logic;
          valid4                          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT fifoStateMachine1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          valid                           :   IN    std_logic;
          pop                             :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT FIFO1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(30 DOWNTO 0);  -- sfix31_En23
          Push                            :   IN    std_logic;
          Pop                             :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic_vector(30 DOWNTO 0)  -- sfix31_En23
          );
  END COMPONENT;

  COMPONENT FIFO2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(30 DOWNTO 0);  -- sfix31_En23
          Push                            :   IN    std_logic;
          Pop                             :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic_vector(30 DOWNTO 0)  -- sfix31_En23
          );
  END COMPONENT;

  COMPONENT FIFO3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(30 DOWNTO 0);  -- sfix31_En23
          Push                            :   IN    std_logic;
          Pop                             :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic_vector(30 DOWNTO 0)  -- sfix31_En23
          );
  END COMPONENT;

  COMPONENT FIFO4
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(30 DOWNTO 0);  -- sfix31_En23
          Push                            :   IN    std_logic;
          Pop                             :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic_vector(30 DOWNTO 0)  -- sfix31_En23
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : fifoWriteSelect
    USE ENTITY work.fifoWriteSelect(rtl);

  FOR ALL : fifoStateMachine1
    USE ENTITY work.fifoStateMachine1(rtl);

  FOR ALL : FIFO1
    USE ENTITY work.FIFO1(rtl);

  FOR ALL : FIFO2
    USE ENTITY work.FIFO2(rtl);

  FOR ALL : FIFO3
    USE ENTITY work.FIFO3(rtl);

  FOR ALL : FIFO4
    USE ENTITY work.FIFO4(rtl);

  -- Constants
  CONSTANT hanningROM_table_data          : vector_of_unsigned24(0 TO 127) := 
    (to_unsigned(16#0009B7#, 24), to_unsigned(16#0026D7#, 24), to_unsigned(16#00574D#, 24),
     to_unsigned(16#009AFC#, 24), to_unsigned(16#00F1BB#, 24), to_unsigned(16#015B56#, 24),
     to_unsigned(16#01D78C#, 24), to_unsigned(16#026612#, 24), to_unsigned(16#030691#, 24),
     to_unsigned(16#03B8A9#, 24), to_unsigned(16#047BEC#, 24), to_unsigned(16#054FE4#, 24),
     to_unsigned(16#063410#, 24), to_unsigned(16#0727E7#, 24), to_unsigned(16#082AD4#, 24),
     to_unsigned(16#093C39#, 24), to_unsigned(16#0A5B70#, 24), to_unsigned(16#0B87CC#, 24),
     to_unsigned(16#0CC096#, 24), to_unsigned(16#0E0510#, 24), to_unsigned(16#0F5475#, 24),
     to_unsigned(16#10ADF9#, 24), to_unsigned(16#1210CA#, 24), to_unsigned(16#137C12#, 24),
     to_unsigned(16#14EEF3#, 24), to_unsigned(16#16688C#, 24), to_unsigned(16#17E7F8#, 24),
     to_unsigned(16#196C4F#, 24), to_unsigned(16#1AF4A3#, 24), to_unsigned(16#1C8008#, 24),
     to_unsigned(16#1E0D8D#, 24), to_unsigned(16#1F9C40#, 24), to_unsigned(16#212B30#, 24),
     to_unsigned(16#22B96B#, 24), to_unsigned(16#2445FD#, 24), to_unsigned(16#25CFF8#, 24),
     to_unsigned(16#27566B#, 24), to_unsigned(16#28D86A#, 24), to_unsigned(16#2A5509#, 24),
     to_unsigned(16#2BCB63#, 24), to_unsigned(16#2D3A93#, 24), to_unsigned(16#2EA1BB#, 24),
     to_unsigned(16#300000#, 24), to_unsigned(16#31548E#, 24), to_unsigned(16#329E97#, 24),
     to_unsigned(16#33DD51#, 24), to_unsigned(16#350FFB#, 24), to_unsigned(16#3635DB#, 24),
     to_unsigned(16#374E3F#, 24), to_unsigned(16#38587C#, 24), to_unsigned(16#3953F0#, 24),
     to_unsigned(16#3A4004#, 24), to_unsigned(16#3B1C27#, 24), to_unsigned(16#3BE7D4#, 24),
     to_unsigned(16#3CA28F#, 24), to_unsigned(16#3D4BE8#, 24), to_unsigned(16#3DE376#, 24),
     to_unsigned(16#3E68DE#, 24), to_unsigned(16#3EDBCF#, 24), to_unsigned(16#3F3C03#, 24),
     to_unsigned(16#3F8941#, 24), to_unsigned(16#3FC358#, 24), to_unsigned(16#3FEA25#, 24),
     to_unsigned(16#3FFD92#, 24), to_unsigned(16#3FFD92#, 24), to_unsigned(16#3FEA25#, 24),
     to_unsigned(16#3FC358#, 24), to_unsigned(16#3F8941#, 24), to_unsigned(16#3F3C03#, 24),
     to_unsigned(16#3EDBCF#, 24), to_unsigned(16#3E68DE#, 24), to_unsigned(16#3DE376#, 24),
     to_unsigned(16#3D4BE8#, 24), to_unsigned(16#3CA28F#, 24), to_unsigned(16#3BE7D4#, 24),
     to_unsigned(16#3B1C27#, 24), to_unsigned(16#3A4004#, 24), to_unsigned(16#3953F0#, 24),
     to_unsigned(16#38587C#, 24), to_unsigned(16#374E3F#, 24), to_unsigned(16#3635DB#, 24),
     to_unsigned(16#350FFB#, 24), to_unsigned(16#33DD51#, 24), to_unsigned(16#329E97#, 24),
     to_unsigned(16#31548E#, 24), to_unsigned(16#300000#, 24), to_unsigned(16#2EA1BB#, 24),
     to_unsigned(16#2D3A93#, 24), to_unsigned(16#2BCB63#, 24), to_unsigned(16#2A5509#, 24),
     to_unsigned(16#28D86A#, 24), to_unsigned(16#27566B#, 24), to_unsigned(16#25CFF8#, 24),
     to_unsigned(16#2445FD#, 24), to_unsigned(16#22B96B#, 24), to_unsigned(16#212B30#, 24),
     to_unsigned(16#1F9C40#, 24), to_unsigned(16#1E0D8D#, 24), to_unsigned(16#1C8008#, 24),
     to_unsigned(16#1AF4A3#, 24), to_unsigned(16#196C4F#, 24), to_unsigned(16#17E7F8#, 24),
     to_unsigned(16#16688C#, 24), to_unsigned(16#14EEF3#, 24), to_unsigned(16#137C12#, 24),
     to_unsigned(16#1210CA#, 24), to_unsigned(16#10ADF9#, 24), to_unsigned(16#0F5475#, 24),
     to_unsigned(16#0E0510#, 24), to_unsigned(16#0CC096#, 24), to_unsigned(16#0B87CC#, 24),
     to_unsigned(16#0A5B70#, 24), to_unsigned(16#093C39#, 24), to_unsigned(16#082AD4#, 24),
     to_unsigned(16#0727E7#, 24), to_unsigned(16#063410#, 24), to_unsigned(16#054FE4#, 24),
     to_unsigned(16#047BEC#, 24), to_unsigned(16#03B8A9#, 24), to_unsigned(16#030691#, 24),
     to_unsigned(16#026612#, 24), to_unsigned(16#01D78C#, 24), to_unsigned(16#015B56#, 24),
     to_unsigned(16#00F1BB#, 24), to_unsigned(16#009AFC#, 24), to_unsigned(16#00574D#, 24),
     to_unsigned(16#0026D7#, 24), to_unsigned(16#0009B7#, 24));  -- ufix24 [128]

  -- Signals
  SIGNAL iFFTData_signed                  : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL HwModeRegister_reg               : vector_of_signed31(0 TO 1);  -- sfix31 [2]
  SIGNAL iFFTData_1                       : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch4_reg                  : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL Bitwise_Operator_out1            : std_logic;
  SIGNAL count_step                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_from                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_reset                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL hanningIndex_out1                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_1                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_2                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_3                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL hanningROM_index                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL hanningROM_out1                  : unsigned(23 DOWNTO 0);  -- ufix24_En22
  SIGNAL hanningROM_out1_1                : unsigned(23 DOWNTO 0) := to_unsigned(16#000000#, 24);  -- ufix24_En22
  SIGNAL hanningROM_out1_2                : unsigned(23 DOWNTO 0);  -- ufix24_En22
  SIGNAL Product_cast                     : signed(24 DOWNTO 0);  -- sfix25_En22
  SIGNAL Product_mul_temp                 : signed(55 DOWNTO 0);  -- sfix56_En45
  SIGNAL Product_cast_1                   : signed(54 DOWNTO 0);  -- sfix55_En45
  SIGNAL Product_out1                     : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL delayMatch11_reg                 : vector_of_signed31(0 TO 4087);  -- sfix31 [4088]
  SIGNAL Product_out1_1                   : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL frameCounter_ctrl_const_out      : std_logic;
  SIGNAL frameCounter_ctrl_delay_out      : std_logic;
  SIGNAL frameCounter_Initial_Val_out     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL count_step_1                     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL frameCounter_out1                : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL count_4                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL count_5                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL frameCounter_out                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL valid1                           : std_logic;
  SIGNAL valid2                           : std_logic;
  SIGNAL valid3                           : std_logic;
  SIGNAL valid4                           : std_logic;
  SIGNAL delayMatch6_reg                  : std_logic_vector(4089 DOWNTO 0);  -- ufix1 [4090]
  SIGNAL valid1_1                         : std_logic;
  SIGNAL pop                              : std_logic;
  SIGNAL Rate_Transition4_ds_out          : std_logic;
  SIGNAL Rate_Transition4_out1            : std_logic;
  SIGNAL Rate_Transition4_out1_1          : std_logic;
  SIGNAL delayMatch7_reg                  : std_logic_vector(4089 DOWNTO 0);  -- ufix1 [4090]
  SIGNAL valid2_1                         : std_logic;
  SIGNAL fifoStateMachine2_out1           : std_logic;
  SIGNAL Rate_Transition1_ds_out          : std_logic;
  SIGNAL Rate_Transition1_out1            : std_logic;
  SIGNAL Rate_Transition1_out1_1          : std_logic;
  SIGNAL delayMatch8_reg                  : std_logic_vector(4089 DOWNTO 0);  -- ufix1 [4090]
  SIGNAL valid3_1                         : std_logic;
  SIGNAL fifoStateMachine3_out1           : std_logic;
  SIGNAL Rate_Transition2_ds_out          : std_logic;
  SIGNAL Rate_Transition2_out1            : std_logic;
  SIGNAL Rate_Transition2_out1_1          : std_logic;
  SIGNAL delayMatch9_reg                  : std_logic_vector(4089 DOWNTO 0);  -- ufix1 [4090]
  SIGNAL valid4_1                         : std_logic;
  SIGNAL fifoStateMachine4_out1           : std_logic;
  SIGNAL Rate_Transition3_ds_out          : std_logic;
  SIGNAL Rate_Transition3_out1            : std_logic;
  SIGNAL Rate_Transition3_out1_1          : std_logic;
  SIGNAL FIFO1_out1                       : std_logic_vector(30 DOWNTO 0);  -- ufix31
  SIGNAL FIFO1_out1_signed                : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL FIFO2_out1                       : std_logic_vector(30 DOWNTO 0);  -- ufix31
  SIGNAL FIFO2_out1_signed                : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL Add_stage2_add_cast              : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Add_stage2_add_cast_1            : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Add_op_stage1                    : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL FIFO3_out1                       : std_logic_vector(30 DOWNTO 0);  -- ufix31
  SIGNAL FIFO3_out1_signed                : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL Add_stage3_add_cast              : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Add_stage3_add_cast_1            : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Add_op_stage2                    : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL FIFO4_out1                       : std_logic_vector(30 DOWNTO 0);  -- ufix31
  SIGNAL FIFO4_out1_signed                : signed(30 DOWNTO 0);  -- sfix31_En23
  SIGNAL Add_stage4_add_cast              : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Add_out1                         : signed(32 DOWNTO 0);  -- sfix33_En23

BEGIN
  u_fifoWriteSelect : fifoWriteSelect
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              fifoCounter => std_logic_vector(frameCounter_out1),  -- ufix2
              validSignal => iFFTValid,
              valid1 => valid1,
              valid2 => valid2,
              valid3 => valid3,
              valid4 => valid4
              );

  u_fifoStateMachine1 : fifoStateMachine1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              valid => valid1,
              pop => pop
              );

  u_fifoStateMachine2 : fifoStateMachine1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              valid => valid2,
              pop => fifoStateMachine2_out1
              );

  u_fifoStateMachine3 : fifoStateMachine1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              valid => valid3,
              pop => fifoStateMachine3_out1
              );

  u_fifoStateMachine4 : fifoStateMachine1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              valid => valid4,
              pop => fifoStateMachine4_out1
              );

  u_FIFO1 : FIFO1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_2048_1 => enb_1_2048_1,
              enb_1_1_1 => enb_1_1_1,
              In_rsvd => std_logic_vector(Product_out1_1),  -- sfix31_En23
              Push => valid1_1,
              Pop => Rate_Transition4_out1_1,
              Out_rsvd => FIFO1_out1  -- sfix31_En23
              );

  u_FIFO2 : FIFO2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_2048_1 => enb_1_2048_1,
              enb_1_1_1 => enb_1_1_1,
              In_rsvd => std_logic_vector(Product_out1_1),  -- sfix31_En23
              Push => valid2_1,
              Pop => Rate_Transition1_out1_1,
              Out_rsvd => FIFO2_out1  -- sfix31_En23
              );

  u_FIFO3 : FIFO3
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_2048_1 => enb_1_2048_1,
              enb_1_1_1 => enb_1_1_1,
              In_rsvd => std_logic_vector(Product_out1_1),  -- sfix31_En23
              Push => valid3_1,
              Pop => Rate_Transition2_out1_1,
              Out_rsvd => FIFO3_out1  -- sfix31_En23
              );

  u_FIFO4 : FIFO4
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_2048_1 => enb_1_2048_1,
              enb_1_1_1 => enb_1_1_1,
              In_rsvd => std_logic_vector(Product_out1_1),  -- sfix31_En23
              Push => valid4_1,
              Pop => Rate_Transition3_out1_1,
              Out_rsvd => FIFO4_out1  -- sfix31_En23
              );

  iFFTData_signed <= signed(iFFTData);

  HwModeRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister_reg <= (OTHERS => to_signed(16#00000000#, 31));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        HwModeRegister_reg(0) <= iFFTData_signed;
        HwModeRegister_reg(1) <= HwModeRegister_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;

  iFFTData_1 <= HwModeRegister_reg(1);

  stateControl_1 <= '1';

  delayMatch4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch4_reg <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch4_reg(0) <= stateControl_1;
        delayMatch4_reg(5 DOWNTO 1) <= delayMatch4_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  stateControl_2 <= delayMatch4_reg(5);

  Bitwise_Operator_out1 <=  NOT iFFTValid;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 128
  count_step <= to_unsigned(16#01#, 8);

  count_from <= to_unsigned(16#00#, 8);

  count_reset <= to_unsigned(16#00#, 8);

  count <= hanningIndex_out1 + count_step;

  
  need_to_wrap <= '1' WHEN hanningIndex_out1 = to_unsigned(16#80#, 8) ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  
  count_1 <= hanningIndex_out1 WHEN iFFTValid = '0' ELSE
      count_value;

  
  count_2 <= count_1 WHEN Bitwise_Operator_out1 = '0' ELSE
      count_reset;

  
  count_3 <= hanningIndex_out1 WHEN stateControl_2 = '0' ELSE
      count_2;

  hanningIndex_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      hanningIndex_out1 <= to_unsigned(16#00#, 8);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        hanningIndex_out1 <= count_3;
      END IF;
    END IF;
  END PROCESS hanningIndex_process;


  
  hanningROM_index <= to_signed(16#0000007F#, 32) WHEN hanningIndex_out1 > to_unsigned(16#0000007F#, 8) ELSE
      signed(resize(hanningIndex_out1, 32));
  hanningROM_out1 <= hanningROM_table_data(to_integer(hanningROM_index));

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF enb = '1' THEN
        hanningROM_out1_1 <= hanningROM_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  HwModeRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      hanningROM_out1_2 <= to_unsigned(16#000000#, 24);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        hanningROM_out1_2 <= hanningROM_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  Product_cast <= signed(resize(hanningROM_out1_2, 25));
  Product_mul_temp <= iFFTData_1 * Product_cast;
  Product_cast_1 <= Product_mul_temp(54 DOWNTO 0);
  Product_out1 <= Product_cast_1(52 DOWNTO 22);

  delayMatch11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch11_reg <= (OTHERS => to_signed(16#00000000#, 31));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch11_reg(0) <= Product_out1;
        delayMatch11_reg(1 TO 4087) <= delayMatch11_reg(0 TO 4086);
      END IF;
    END IF;
  END PROCESS delayMatch11_process;

  Product_out1_1 <= delayMatch11_reg(4087);

  frameCounter_ctrl_const_out <= '1';

  frameCounter_ctrl_delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      frameCounter_ctrl_delay_out <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        frameCounter_ctrl_delay_out <= frameCounter_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS frameCounter_ctrl_delay_process;


  frameCounter_Initial_Val_out <= to_unsigned(16#2#, 2);

  -- Free running, Unsigned Counter
  --  initial value   = 2
  --  step value      = 1
  count_step_1 <= to_unsigned(16#1#, 2);

  count_4 <= frameCounter_out1 + count_step_1;

  
  count_5 <= frameCounter_out1 WHEN fftFramePulse = '0' ELSE
      count_4;

  frameCounter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      frameCounter_out <= to_unsigned(16#0#, 2);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        frameCounter_out <= count_5;
      END IF;
    END IF;
  END PROCESS frameCounter_process;


  
  frameCounter_out1 <= frameCounter_Initial_Val_out WHEN frameCounter_ctrl_delay_out = '0' ELSE
      frameCounter_out;

  delayMatch6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch6_reg <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch6_reg(0) <= valid1;
        delayMatch6_reg(4089 DOWNTO 1) <= delayMatch6_reg(4088 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  valid1_1 <= delayMatch6_reg(4089);

  -- Downsample register
  Rate_Transition4_ds_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition4_ds_out <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_7 = '1' THEN
        Rate_Transition4_ds_out <= pop;
      END IF;
    END IF;
  END PROCESS Rate_Transition4_ds_process;


  -- Downsample output register
  Rate_Transition4_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition4_out1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition4_out1 <= Rate_Transition4_ds_out;
      END IF;
    END IF;
  END PROCESS Rate_Transition4_output_process;


  PipelineRegister4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition4_out1_1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition4_out1_1 <= Rate_Transition4_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister4_process;


  delayMatch7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch7_reg <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch7_reg(0) <= valid2;
        delayMatch7_reg(4089 DOWNTO 1) <= delayMatch7_reg(4088 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch7_process;

  valid2_1 <= delayMatch7_reg(4089);

  -- Downsample register
  Rate_Transition1_ds_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition1_ds_out <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_7 = '1' THEN
        Rate_Transition1_ds_out <= fifoStateMachine2_out1;
      END IF;
    END IF;
  END PROCESS Rate_Transition1_ds_process;


  -- Downsample output register
  Rate_Transition1_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition1_out1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition1_out1 <= Rate_Transition1_ds_out;
      END IF;
    END IF;
  END PROCESS Rate_Transition1_output_process;


  PipelineRegister5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition1_out1_1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition1_out1_1 <= Rate_Transition1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister5_process;


  delayMatch8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch8_reg <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch8_reg(0) <= valid3;
        delayMatch8_reg(4089 DOWNTO 1) <= delayMatch8_reg(4088 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch8_process;

  valid3_1 <= delayMatch8_reg(4089);

  -- Downsample register
  Rate_Transition2_ds_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition2_ds_out <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_7 = '1' THEN
        Rate_Transition2_ds_out <= fifoStateMachine3_out1;
      END IF;
    END IF;
  END PROCESS Rate_Transition2_ds_process;


  -- Downsample output register
  Rate_Transition2_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition2_out1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition2_out1 <= Rate_Transition2_ds_out;
      END IF;
    END IF;
  END PROCESS Rate_Transition2_output_process;


  PipelineRegister2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition2_out1_1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition2_out1_1 <= Rate_Transition2_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister2_process;


  delayMatch9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch9_reg <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch9_reg(0) <= valid4;
        delayMatch9_reg(4089 DOWNTO 1) <= delayMatch9_reg(4088 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch9_process;

  valid4_1 <= delayMatch9_reg(4089);

  -- Downsample register
  Rate_Transition3_ds_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition3_ds_out <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_7 = '1' THEN
        Rate_Transition3_ds_out <= fifoStateMachine4_out1;
      END IF;
    END IF;
  END PROCESS Rate_Transition3_ds_process;


  -- Downsample output register
  Rate_Transition3_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition3_out1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition3_out1 <= Rate_Transition3_ds_out;
      END IF;
    END IF;
  END PROCESS Rate_Transition3_output_process;


  PipelineRegister3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition3_out1_1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition3_out1_1 <= Rate_Transition3_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister3_process;


  FIFO1_out1_signed <= signed(FIFO1_out1);

  FIFO2_out1_signed <= signed(FIFO2_out1);

  Add_stage2_add_cast <= resize(FIFO1_out1_signed, 32);
  Add_stage2_add_cast_1 <= resize(FIFO2_out1_signed, 32);
  Add_op_stage1 <= Add_stage2_add_cast + Add_stage2_add_cast_1;

  FIFO3_out1_signed <= signed(FIFO3_out1);

  Add_stage3_add_cast <= resize(Add_op_stage1, 33);
  Add_stage3_add_cast_1 <= resize(FIFO3_out1_signed, 33);
  Add_op_stage2 <= Add_stage3_add_cast + Add_stage3_add_cast_1;

  FIFO4_out1_signed <= signed(FIFO4_out1);

  Add_stage4_add_cast <= resize(FIFO4_out1_signed, 33);
  Add_out1 <= Add_op_stage2 + Add_stage4_add_cast;

  audioOut <= std_logic_vector(Add_out1);

END rtl;

